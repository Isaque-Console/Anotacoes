1. criar uma pasta com o nome do projeto.
2. abrir essa pasta usando o VSCode.
3. criar um arquivo dentro do VSCode, usando a extensão ".js" (segerido "app.js").
4. Para gerar o arquivo "package.json": npm init -y .
5. Para instalar o Express temporariamente: npm i express .
6. Para usar postgres no seu projeto NodeJS adicione a dependencia ao seu projeto: npm i pg .
7. verificar se apareceram os arquivos "node-modules", "package-lock.json" e "package.json".
8. Para usar as variáveis de ambiente, temos de instalar a biblioteca DotEnv: npm install dotenv . Depois criar um arquivo ".env" e
colocar as variáveis de ambiente.
9. criar um arquivo com o nome de ".gitignore" e escrever dentro dele "node_modules" e ".env". Assim, quando eu der o comando para a
aplicação subir para o github, não irá subir essas pastas que estão escritas dentro do arquivo.


OBS: Se estiver usando o banco de dados no docker, deve iniciar o container, usando: docker start nome_do_container .
OBS: Para rodar o projeto, basta digitar no terminal "node ./nome_do_projeto.js ". Ex: node ./app.js

============================================================================================================================================
								REQUIRES
								
require("express") // importa a lib express
const app = express() // inicia a lib
const { Client } = require('pg') // criando uma comunicação com o postgres
const dotenv = require('dotenv'); 
require ('dotenv').config(); // habilitando a utilização do dotenv

============================================================================================================================================
								VARIÁVEIS DE AMBIENTE
								
1.criar um arquivo com nome ".env";
2.dentro dele coloco 
HOST:locashost
DB_USER:postgres // se colocar apenas USER, vai dar erro pois o programa irá considerar o USER do notebook
PASSWORD:Euqasi112358
PORT:5434
DATABASE:Concessionaria // nome do banco que você irá usar

OBS1: os valores das variáveis vai mudar de acordo com o DB que você está usando.
OBS2: não colocar vírgulas no final dos valores das variáveis, senão essa vírgula irá contar como se fosse os valores das variáveis.
OBS3: os nomes das variáveis de ambiente são maiúsculas.

============================================================================================================================================
							COMUNICAÇÃO COM O POSTGRES

dotenv.config(); // para poder usar o dotenv						
const client = new Client({ // criando uma instância da comunicação com o postgres
	user=process.env.DB_USER
	host=
	database= // IMPORTO TODOS ESSES DADOS DO DOTENV
	password=
	port=
})
client.connect();

============================================================================================================================================
							UTILIZAR O JSON
							
app.use(express.json()); // usa a lib express para dizer que vai ler texto em JSON

============================================================================================================================================
							INDICAR A PORTA QUE SERÁ USADA DO PC
							
const port = 3000;
app.listen(port, () => {
	console.log("server running");
});

============================================================================================================================================
							METODOS HTTP
							
1. lembrar que para fazer as querys no DB devo utilizar a instância de comunicação que já fiz, que geralmente é chamada de "client".
2. lembrar que o código do client.query deve ser usada no template string, ou seja, coloco craze no começo e no final da query, ao invés de colocar o valor das variáveis eu coloco $1, $2 , etc, depois coloco uma vírgula e faço um array que irá definir os valores das variáveis, como [nome, marca,cor,fabricacao]. Exemplo:
client.query(`INSERT INTO carro (nome,marca,cor,fabricacao) VALUES ($1,$2,$3,$4);`, [nome,marca,cor,fabricacao]);
3. lembrar de usar o async e o await nas funções get, para a aplicação esperar fazer a consulta no DB, e só depois devolver a resposta.
4. lembrar que os métodos http são escritos no formato de arrow functions. Geralmente assim:
app.post('/', (req,res) => {
	const {atributo1,atributo2,etc} = req.body;
	//implementar a query para o DB
	res.send("Alguma mensagem para ser retornada, caso queira retornar, mas não é necessário");
})

============================================================================================================================================
							PASSOS A PASSO DO CÓDIGO
								 
1.colocar os requires;
2.definir as variáveis de ambiente no arquivo .env;
3.fazer comunicação com o DB;
4.utilizar o JSON;
5.indicar a porta que será usada do pc;
6.fazer os métodos htpp;
